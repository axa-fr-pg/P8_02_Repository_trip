/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
	id 'org.springframework.boot' version '2.1.16.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java-library'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenLocal()
    mavenCentral()
        flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile(group: 'tripmaster', name : 'common', version : "1.0.0")
    compile(name:'TripPricer', ext:'jar')

    testCompile("junit:junit")
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.6.RELEASE'

}

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.4"
}
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}
test.finalizedBy jacocoTestReport

version='1.0.0'

bootJar {
    baseName = "${project.name}"
    version =  "${project.version}"
	mainClassName = "tripmaster.${project.name}.Application"
}

task dockerJar {
	delete 'docker/${project.name}.jar'
	doLast {
		copy {
	        from "build/libs/${project.name}-${project.version}.jar"
		    rename "${project.name}-${project.version}.jar", "${project.name}.jar"
	        into 'docker'
    	}
    }
	dependsOn bootJar
}

task dockerBuildImage(type:Exec) {
	workingDir "${projectDir}/docker"
    commandLine "docker", "build", "-t", "${project.name}", "."
	dependsOn dockerJar
}
task unloadDockerImage(type:Exec) {
   	commandLine "docker", "image", "rm", "${project.name}", "-f"
}
task zipDockerImage(type:Exec) {
	workingDir "${projectDir}/docker"
   	commandLine "7z", "a", "${project.name}.zip", "${project.name}.tar"
}
task saveDockerImage(type:Exec) {
	group = 'tripmaster'
	dependsOn dockerBuildImage
	doFirst {
	    workingDir "${projectDir}/docker"
	    standardOutput new FileOutputStream("${projectDir}/docker/${project.name}.tar")
	}
    commandLine "docker", "save", "${project.name}"
    finalizedBy zipDockerImage
    finalizedBy unloadDockerImage
}